(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{284:function(n,e,t){"use strict";t.r(e);var a=t(0),r=Object(a.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h2",{attrs:{id:"基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[n._v("#")]),n._v(" 基础")]),n._v(" "),t("h3",{attrs:{id:"_1-spring"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-spring"}},[n._v("#")]),n._v(" 1. spring")]),n._v(" "),t("pre",[t("code",[n._v("- 描述\n  - 非侵入式\n    - 描述\n      - 非侵入式是指Spring框架的API不会在业务逻辑上出现，我们的业务逻辑应该是纯净的\n  - 容器\n    - 描述\n      - 可以写一个配置文件（通常是xml文件）\n      - 在上面定义对象的名字，是否是单例，以及设置与其他对象的依赖关系\n      - 在容器启动之后，这些对象就被实例化好了，你直接去用就好了，而且依赖关系也建立好了\n      - 注：\n        - xml文件，是一个容器\n        - 单例\n          - 描述\n        　　- 1、单例类只能有一个实例。\n        　　- 2、单例类必须自己创建自己的唯一实例。\n        　　- 3、单例类必须给所有其他对象提供这一实例。\n            - 单例模式确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例\n    - 概述\n      - 通过xml文件容器配置，java启动读取，实现容器的价值\n  - IOC（控制反转）\n  - 依赖注入\n    - 描述\n      - 建立对象与对象之间依赖关系的实现\n      - 构造注入、set注入\n  - AOP（面向方面编程）\n    - 描述\n      - 把日志、安全、事务管理等服务（或功能）理解成一个“方面”，完全可以剥离出来做到复用，将“方面”动态的插入到业务逻辑中\n- doc\n  http://blog.163.com/jiqiang_1984/blog/static/156664820102190325615/\n")])]),n._v(" "),t("h3",{attrs:{id:"_2-整体思路"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-整体思路"}},[n._v("#")]),n._v(" 2. 整体思路")]),n._v(" "),t("pre",[t("code",[n._v("  一个前端控制器统一接收和解析请求，再根据的URL，将请求分发到 Controller\n")])]),n._v(" "),t("h3",{attrs:{id:"_3-前端控制器（frontcontroller）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-前端控制器（frontcontroller）"}},[n._v("#")]),n._v(" 3. 前端控制器（FrontController）")]),n._v(" "),t("pre",[t("code",[n._v("- 描述：\n  - 1. 实现了对应接口的DispatcherServlet\n  - 2. 通过 RequestMapping 和 Controller 注解标识映射规则，无需通过接口依赖实现控制i器\n  - 3. 通过 internalResourceViewResolver 根据URL和视图名称查找视图，核心接口是 ViewResolver\n")])]),n._v(" "),t("h3",{attrs:{id:"_4-开发"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-开发"}},[n._v("#")]),n._v(" 4. 开发")]),n._v(" "),t("pre",[t("code",[n._v('- （1）Spring MVC 初始化\n  - （没有这步骤）\n  - 注：\n    - 采用注解映射 URL 和 Controller ，因此没有对应的步骤\n    - 需要我们配置 DispatcherServlet 以及其对应的 URL ，来达到接管所有请求的目的\n    - Spring 已经利用 Servlet3.0 定义的 ServletContainerInitializer 机制，为我们提供了默认的 AbstractAnnotationConfigDispatcherServletInitializer\n    - 只需要像继承 HttpApplication 的 MvcApplication 一样，写一个 MyWebApplicationInitializer\n- （2）URL 和 View 的映射\n  - 实现：\n      package s4s;\n\n      import org.springframework.context.annotation.ComponentScan;\n      import org.springframework.context.annotation.Configuration;\n      import org.springframework.web.servlet.config.annotation.DelegatingWebMvcConfiguration;\n      import org.springframework.web.servlet.config.annotation.ViewResolverRegistry;\n      import org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;\n      import org.springframework.web.servlet.view.InternalResourceViewResolver;\n\n      public class MyWebApplicationInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {\n\n          @Override\n          protected Class<?>[] getRootConfigClasses() {\n              return new Class[] { AppConfig.class };\n          }\n\n          @Override\n          protected Class<?>[] getServletConfigClasses() {\n              return new Class[] { AppConfig.class };\n          }\n\n          @Override\n          protected String[] getServletMappings() {\n              return new String[] { "/" };\n          }\n\n      }\n\n      @Configuration\n      @ComponentScan\n      class AppConfig extends DelegatingWebMvcConfiguration {\n\n          @Override //重写\n          protected void configureViewResolvers(ViewResolverRegistry registry) {\n              InternalResourceViewResolver viewResolver = new InternalResourceViewResolver();\n              viewResolver.setPrefix("/WEB-INF/views/");\n              viewResolver.setSuffix(".jsp");\n              registry.viewResolver(viewResolver);\n          }\n      }\n  - 注：\n    - Spring MVC 的 internalResourceViewResolver 没有提供默认值，因此，我们如果不定义 Path 和扩展名，只需要 MyWebApplicationInitializer 即可。\n    - （实践操作）一般我们会指定将 View 放置在统一的视图目录中，使用特定的扩展名。\n    - Spring 同样提供了 DelegatingWebMvcConfiguration ，我们只需写一个自己的 AppConfig 继承它，重写 configureViewResolvers 方法即可。\n- （3）URL 和 Controller 的映射\n  - 两个注解：Controller 和 RequestMapping\n  - 注:\n    - 我们简单的定义一个 POJO MyController 以及其简单的Home方法.\n    - 并应用上述注解：\n                          package s4s;\n\n                          import org.springframework.stereotype.Controller;\n                          import org.springframework.web.bind.annotation.RequestMapping;\n\n                          @Controller\n                          public class MyController {\n\n                              @RequestMapping("/")\n                              public String Home() {\n                                  return "home";\n                              }\n                          }\n    - （实际操作）添加 /WEB-INF/views/home.jsp 视图文件，就完成了最简单的示例\n- （4）使用 Model\n  - Spring MVC 中 View 和 Model 是一对多的，提供了 ModelMap 和其子类 ModelAndView\n  - ModelMap的基类是 LinkedHashMap<String, Object>\n  - 我们修改 MyController 的代码，使用 ModelAndView 来传递一个简单 UserModel 模型，作为参数的 UserModel 对象 model，会自动将请求参数映射到 model 的属性。\n  - 返回值 ModelAndView 时，只不过因为 Spring MVC 模型是多个模型的列表，我们还需要指定返回模型的 Name\n  - 实现：\n      package s4s;\n\n      import org.springframework.stereotype.Controller;\n      import org.springframework.web.bind.annotation.ModelAttribute;\n      import org.springframework.web.bind.annotation.RequestMapping;\n      import org.springframework.web.servlet.ModelAndView;\n\n      @Controller\n      public class MyController {\n          @RequestMapping("/")\n          public ModelAndView Home(@ModelAttribute UserModel model) {\n              model.setUserName(model.getUserName() + "~");\n              return new ModelAndView("home", "model", model);\n          }\n      }\n\n      class UserModel {\n          String userName = "";\n\n          public String getUserName() {\n              return userName;\n          }\n\n          public void setUserName(String userName) {\n              this.userName = userName;\n          }\n      }\n- （5）使用 View\n\n\n\n  - doc\n    http://www.cnblogs.com/wawlian/archive/2012/11/17/2775435.html\n')])]),n._v(" "),t("ul",[t("li",[n._v("仓库:\n"),t("ul",[t("li",[n._v("https://github.com/yt46767/SpringMVCSummary/blob/master/README.md")])])]),n._v(" "),t("li",[n._v("doc:\n"),t("ul",[t("li",[n._v("http://www.android100.org/html/201605/30/240209.html")])])])]),n._v(" "),t("h3",{attrs:{id:"数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[n._v("#")]),n._v(" 数据类型")]),n._v(" "),t("h4",{attrs:{id:"_1-数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-数据类型"}},[n._v("#")]),n._v(" 1. 数据类型")]),n._v(" "),t("pre",[t("code",[n._v("- 基本数据类型（8个）\n  short、int、boolean、long、char、byte、float、double\n  - 易漏\n    short、byte、char、float、double\n  - 注意\n    byte的大小范围：8-128、127-0\n  - doc\n    http://blog.csdn.net/xyh94233/article/details/6929332\n- 易错数据类型：\n| 数据类型   |  位数  |  字节数 |\n| ----------------------------  |\n| double     |  64位  |   8字节 |\n| integer    |  32位  |   4字节 |\n| character  |  16位  |   2字节 |\n| unicode    |  8位   |   1字节 |\n| byte       |  8位   |   1字节 |\n -------------------------------\n")])]),n._v(" "),t("h4",{attrs:{id:"_2-enum"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-enum"}},[n._v("#")]),n._v(" 2.enum")]),n._v(" "),t("pre",[t("code",[n._v("- doc\n  http://www.cnblogs.com/hyl8218/p/5088287.html\n")])]),n._v(" "),t("h4",{attrs:{id:"_3-arraylist-linkedlist-vector"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-arraylist-linkedlist-vector"}},[n._v("#")]),n._v(" 3.arrayList & linkedList & vector")]),n._v(" "),t("pre",[t("code",[n._v("- arrayList\n  - 描述\n    - 异步\n    - 便于查询和修改\n    - 不便于插入和删除\n- linkedList\n  - 描述\n    - 可扩展性\n    - 便于插入和删除\n    - 不便于查询和修改\n- vector\n  - 描述\n    - 同步\n    - 可扩展性\n    - 便于查询和修改\n    - 不便于插入和删除\n")])]),n._v(" "),t("h4",{attrs:{id:"_4-hashtable-hashmap"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-hashtable-hashmap"}},[n._v("#")]),n._v(" 4.Hashtable & HashMap")]),n._v(" "),t("pre",[t("code",[n._v("- Hashtable\n  - 描述\n    - 键值不允许为null\n    - 同步\n    - 继承Dectionary类\n- HashMap\n  - 描述\n    - 只允许一个键值为null\n    - 异步\n    - 非线程安全\n    - 树型存储结构，实现Map接口\n")])]),n._v(" "),t("h4",{attrs:{id:"_5-树-二叉树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-树-二叉树"}},[n._v("#")]),n._v(" 5.树 & 二叉树")]),n._v(" "),t("pre",[t("code",[n._v("- 树\n  - 描述\n    - 不可以为空\n    - 没有顺序关系\n    - 度最多为N\n    - 分支度为无限制\n- 二叉树\n  - 描述\n    - 可为空\n    - 有顺序关系\n    - 度最多为0\n    - 分支度为0,1,2\n")])]),n._v(" "),t("h3",{attrs:{id:"方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[n._v("#")]),n._v(" 方法")]),n._v(" "),t("h4",{attrs:{id:"_1-传参"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-传参"}},[n._v("#")]),n._v(" 1.传参")]),n._v(" "),t("pre",[t("code",[n._v("  - 参数类型\n    - 基本类型\n    - 对象类型\n")])]),n._v(" "),t("h4",{attrs:{id:"_2-参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-参数"}},[n._v("#")]),n._v(" 2.参数")]),n._v(" "),t("pre",[t("code",[n._v("- 形式参数\n  - 定义函数时，写在括号里的参数\n- 实际参数\n  - 调用函数时，写在括号里的参数\n")])]),n._v(" "),t("h4",{attrs:{id:"_3-equals"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-equals"}},[n._v("#")]),n._v(" 3.== & equals")]),n._v(" "),t("pre",[t("code",[n._v("- ==\n  - 描述\n    -用于八种基本数据类型，是比值\n- equals\n  - 描述\n    - 用于对象，是比地址\n")])]),n._v(" "),t("h4",{attrs:{id:"_4-this-super"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-this-super"}},[n._v("#")]),n._v(" 4.this & super")]),n._v(" "),t("pre",[t("code",[n._v('- this\n  - 描述\n    调用本类的属性和方法\n  - 特殊\n    public class className{\n      public static dataType className1(dataType2 param2){\n        /*\n          错误\n          static修饰方法，this不能使用\n        */\n        this.property = "111";\n        this.method();\n      }\n    }\n- super\n  - 描述\n    调用父类的属性和方法\n  - 特殊\n    public class className{\n      public static dataType className1(dataType2 param2){\n        /*\n          错误\n          static修饰方法，super不能使用\n        */\n        super.property = "111";\n        super.method();\n      }\n    }\n')])]),n._v(" "),t("h4",{attrs:{id:"_5-length"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-length"}},[n._v("#")]),n._v(" 5.length")]),n._v(" "),t("pre",[t("code",[n._v("- 方法\n  - 如：String.length();\n- 属性\n  - 如：数组.length = 10;\n")])]),n._v(" "),t("h3",{attrs:{id:"异常"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#异常"}},[n._v("#")]),n._v(" 异常")]),n._v(" "),t("h4",{attrs:{id:"_1-处理异常"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-处理异常"}},[n._v("#")]),n._v(" 1.处理异常")]),n._v(" "),t("pre",[t("code",[n._v("- 关键字\n  - throw\n    - 描述\n      - 往方法内部抛出异常\n  - throws\n    - 描述\n      - 往方法外部抛出异常\n      - 常用\n  - try\n  - catch\n  - finally\n")])]),n._v(" "),t("h3",{attrs:{id:"修饰符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#修饰符"}},[n._v("#")]),n._v(" 修饰符")]),n._v(" "),t("h4",{attrs:{id:"_1-final-static"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-final-static"}},[n._v("#")]),n._v(" 1.final & static")]),n._v(" "),t("pre",[t("code",[n._v('- final\n  - 描述:\n    - 修饰变量、方法、类\n    - 作为全局变量，一定要附初始值\n      - 如：\n        public class className{\n          public final dataType paramName = initialValue; //全局变量，一定要附初始值\n\n          public void className1(dataType1 param1){\n            final dataType1 paramName1; //全局变量，可不附初始值\n          }\n        }\n      - 注：\n        - 全局变量，才可以用public、protected、default、private\n        - 类函数，才可以用public、protected、default、private\n        - 方法变量，用不了public、protected、default、private\n\n  - 特殊:\n    final static ，一定要附初始值\n    - 如：\n      final static paramName  = initialValue;\n  - "三不"\n    - 不重写\n      - 如：\n        public class className{\n          public final dataType className1(dataType1 param1){\n            ...\n          }\n          /*\n            错误\n            final修饰的类方法，不能重写\n          */\n          public final dataType className1(dataType2 param2){\n            ...\n          }\n        }\n    - 不继承\n      - 如：\n        public final class className1 {\n            ...\n        }\n        /*\n          此题，错误\n          final修饰类，不可被继承\n        */\n        public class className2 extends className1 {\n            ...\n        }\n    - 不改变\n      - 如：\n        public class className{\n          public final String paramName = "111";\n          ...\n          /*\n            错误\n            final修饰后，不能改变\n          */\n          paramName = "1";\n        }\n  - doc\n    http://yqgao.blog.51cto.com/773490/170194\n- static\n  - 描述:\n    作为全局变量，可以不附初始值\n    - 如：\n      public class className{\n        public static String paramName;\n\n        public void className1(type1 param1){\n          ...\n        }\n      }\n')])]),n._v(" "),t("h4",{attrs:{id:"_2-访问控制符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-访问控制符"}},[n._v("#")]),n._v(" 2.访问控制符")]),n._v(" "),t("pre",[t("code",[n._v("- 描述\n   -----------------------------------------------\n  | 访问控制符  | 类内部 | 本包  | 子类  | 外部包 |\n   -----------------------------------------------\n  | public      | 允许   | 允许  | 允许  | 允许   |\n  | protected   | 允许   | 允许  | 允许  | 拒绝   |\n  | default     | 允许   | 允许  | 拒绝  | 拒绝   |\n  | private     | 允许   | 拒绝  | 拒绝  | 拒绝   |\n   -----------------------------------------------\n- doc\n  http://www.cnblogs.com/jingmengxintang/p/5898900.html\n")])]),n._v(" "),t("h3",{attrs:{id:"同步与异步"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#同步与异步"}},[n._v("#")]),n._v(" 同步与异步")]),n._v(" "),t("h4",{attrs:{id:"_1-线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-线程"}},[n._v("#")]),n._v(" 1.线程")]),n._v(" "),t("pre",[t("code",[n._v("- 五种状态\n  - 新建\n  - 就绪\n  - 运行\n  - 阻塞\n  - 终止\n- 线程同步\n  - wait() 让当前线程等待\n  - sleep() 在指定时间暂停线程\n  - notify() 与 wait() 同时使用 ，相当于解锁\n  - notifyAll() 全部解锁\n")])]),n._v(" "),t("h3",{attrs:{id:"io层"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#io层"}},[n._v("#")]),n._v(" IO层")]),n._v(" "),t("h4",{attrs:{id:"_1-collection"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-collection"}},[n._v("#")]),n._v(" 1.collection")]),n._v(" "),t("pre",[t("code",[n._v("- 结构：\n  ＩＯ管道流\n  缓冲流\n  转换流\n  打印流\n  回压流\n  过滤流\n  数据流\n  内存流\n  对象流\n  随机访问流\n  - 描述：\n    可以将文件同时读写出来\n")])]),n._v(" "),t("h4",{attrs:{id:"_2-字符流"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-字符流"}},[n._v("#")]),n._v(" 2.字符流")]),n._v(" "),t("pre",[t("code",[n._v("- 读取输入流\n  InputStreamReader      ->         BufferedReader\n  读 字节流 转 字符流 传 输入流     读 字符输入流\n- 发送输出流\n  BufferedWriter   ->  OutputStreamWriter\n  写 字符输出流        字符流 转 字节流 传 底层传输流\n")])]),n._v(" "),t("h3",{attrs:{id:"系统"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#系统"}},[n._v("#")]),n._v(" 系统")]),n._v(" "),t("h4",{attrs:{id:"_1-gc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-gc"}},[n._v("#")]),n._v(" 1.GC")]),n._v(" "),t("pre",[t("code",[n._v("- 描述：\n  - GC, gabage collection, 垃圾回收\n- 达到回收的条件：\n  - 对象超过作用域\n- 严重：\n  - 错误的垃圾回收机制，将导致系统崩溃\n- 启动\n  - 一事\n    - System.gc();\n  - 多事\n    - Runtime.getruntime.gc();\n")])]),n._v(" "),t("p",[n._v("仓库：\nhttps://github.com/yt46767/JavaKnowSummary/blob/master/README.md\ndoc:\nhttp://www.th7.cn/Program/java/201510/633422.shtml")]),n._v(" "),t("h3",{attrs:{id:"单线程socket-多线程socket"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单线程socket-多线程socket"}},[n._v("#")]),n._v(" 单线程socket/多线程socket")]),n._v(" "),t("h3",{attrs:{id:"基础补充"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基础补充"}},[n._v("#")]),n._v(" 基础补充")]),n._v(" "),t("p",[n._v("https://lrh1993.gitbooks.io/android_interview_guide/content/")]),n._v(" "),t("h3",{attrs:{id:"crud"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#crud"}},[n._v("#")]),n._v(" CRUD")]),n._v(" "),t("ul",[t("li",[n._v("概念"),t("br"),n._v(" "),t("span",{staticStyle:{display:"inline-block",width:"20px"}}),n._v("指在做计算处理时的增加(Create)、读取查询(Retrieve)、更新(Update)和删除(Delete)几个单词的首字母简写，即：CRUD=Create(增加)+Retrieve(读取查询)+Update(更新/更改)+Delete(删除)")])]),n._v(" "),t("h2",{attrs:{id:"示例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[n._v("#")]),n._v(" 示例")]),n._v(" "),t("h3",{attrs:{id:"java的jdbc项目，银行管理系统，用来练习java，数据库采用的是mysql"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java的jdbc项目，银行管理系统，用来练习java，数据库采用的是mysql"}},[n._v("#")]),n._v(" java的JDBC项目，银行管理系统，用来练习java，数据库采用的是mysql")]),n._v(" "),t("p",[n._v("https://github.com/wswenyue/BankManage")]),n._v(" "),t("h2",{attrs:{id:"框架"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#框架"}},[n._v("#")]),n._v(" 框架")]),n._v(" "),t("h3",{attrs:{id:"spring-mvc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc"}},[n._v("#")]),n._v(" Spring MVC")])])}),[],!1,null,null,null);e.default=r.exports}}]);